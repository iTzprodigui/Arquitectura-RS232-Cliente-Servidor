/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ClienteServidor;

import BD.Conexion;
import static BD.Conexion.getConexion;
import giovynet.nativelink.SerialPort;
import giovynet.serial.Baud;
import giovynet.serial.Com;
import giovynet.serial.Parameters;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carlos
 */
public class Servidor extends javax.swing.JFrame {

    //Configuacion del Servidor

    final int PUERTO = 9000;
    String mensaje,nombreHost, dispositivo, estado;
    SerialPort libres = new SerialPort();
    DefaultTableModel modelo = new DefaultTableModel();
    String cad_recibe = "";
    String datosRs232, ultimo;

    // Configuracion de los Socket's
    ServerSocket SocketServidor;
    Socket SocketCliente;
    PrintStream salida;

    //Configuracion de IO (Input/Output)
    BufferedReader entrada;

    /*Configuracion PIC*/
    Com com2;
    Parameters settings;

    public Servidor() {
        initComponents();
        setTitle("Servidor");

        Model();
        EncerderServidor();
    }

    public void BD(String estado) {
        try {
            Connection con = null;
            con = getConexion();
            PreparedStatement ps;

            ps = con.prepareStatement("INSERT INTO personas(nombre,dispositivo,estado) VALUES (?,?,?)");

            ps.setString(1, nombreHost);
            ps.setString(2, dispositivo);
            ps.setString(3, estado);
            ps.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void Model() {
        String[] cabecera = {"ID", "Nombre", "Dispositivo", "Estado"};
        modelo.setColumnIdentifiers(cabecera);
        Tabla_Info.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        Combo_coms = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        Area_rs232 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Area_ethernet = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Tabla_Info = new javax.swing.JTable();
        Boton_configurar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("Puerto COM:");

        Area_rs232.setEditable(false);
        Area_rs232.setColumns(20);
        Area_rs232.setRows(5);
        jScrollPane1.setViewportView(Area_rs232);

        Area_ethernet.setEditable(false);
        Area_ethernet.setColumns(20);
        Area_ethernet.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        Area_ethernet.setRows(5);
        Area_ethernet.setAutoscrolls(false);
        jScrollPane2.setViewportView(Area_ethernet);

        jLabel5.setText("Datos RS232");

        jLabel6.setText("Datos Ethernet");

        Tabla_Info.setAutoCreateRowSorter(true);
        Tabla_Info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Correo", "Estado"
            }
        ));
        jScrollPane3.setViewportView(Tabla_Info);

        Boton_configurar.setText("Configurar");
        Boton_configurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_configurar(evt);
            }
        });

        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLimpiar(evt);
            }
        });

        jButton2.setText("Consutar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarBD(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Combo_coms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Boton_configurar))
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Combo_coms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(Boton_configurar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Boton_configurar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_configurar
        try {
            settings = new Parameters();
            settings.setPort(Combo_coms.getSelectedItem().toString());
            settings.setBaudRate(Baud._9600);
            settings.setMinDelayWrite(10);

            com2 = new Com(settings);

            LecturaRs232 RealizarLectura = new LecturaRs232() {
            };
            RealizarLectura.start();

            JOptionPane.showMessageDialog(null, "RS232: STATUS: DISPONIBLE");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "RS232: STATUS: NO DISPONIBLE");
        }
    }//GEN-LAST:event_Boton_configurar

    private void BotonLimpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLimpiar
        Limpiar();
    }//GEN-LAST:event_BotonLimpiar

    public void Limpiar() {
        int filas = modelo.getRowCount();

        for (int i = 0; i < filas; i++) {
            modelo.removeRow(0);
            Area_ethernet.setText("");
            Area_rs232.setText("");
        }
    }

    private void ConsultarBD(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarBD
        Limpiar();

        ResultSet rs = Conexion.getTabla("SELECT * FROM personas");
        try {
            while (rs.next()) {
                modelo.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});
            }

            Tabla_Info.setModel(modelo);
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_ConsultarBD

    public void EncerderServidor() {
        try {
            //Mostramos los puertos coms disponibles
            List<String> listapuertos = libres.getFreeSerialPort();
            for (String String : listapuertos) {
                Combo_coms.addItem(String);
            }

            //Iniciamos el servidor
            SocketServidor = new ServerSocket(PUERTO);
            System.out.println("SERVIDOR");
            System.out.println("Servidor Encendido");

            /* Corremos el hilo */
            SocketConexion RealizarConexion = new SocketConexion() {
            };
            RealizarConexion.start();

        } catch (Exception e) {

        }
    }

    public void Enviar(String dato) {
        try {
            com2.sendString(dato);
        } catch (Exception ex) {
            //JOptionPane.showMessageDialog (null,"Ha ocurrido un error :(" );
            ex.printStackTrace();
        }
    }

    /* CLASES ABSTRACTAS */
    public abstract class LecturaRs232 extends Thread {

        @Override
        public void run() {
            while (true) {
                try {
                    boolean detener = false;
                    char datoRecibido = 0;
                    while ((datoRecibido = com2.receiveSingleChar()) != '\0') {//Realiza un ciclo infinito
                        cad_recibe += datoRecibido;
                        detener = true;
                    }
                    if (detener == true) {//Si el dato leido es diferente de cero 
                        //Imprime el dato, espera 50mS y vuelve a leer hasta que el dato sea igual a cero.
                        detener = false;
                        Area_rs232.append(cad_recibe);
                        
                        //Consulta para obtener el ID
                        ResultSet rt = Conexion.getTabla("SELECT MAX(id_personas) FROM personas");
                        /*Condicionamos para que entre y lea la consulta hacemos una aberracion de 
                         String -> int, le sumamos 1 y lo volvemos a convertir de int -> String*/
                        if (rt.next()) ultimo = Integer.toString(Integer.parseInt(rt.getString(1)) + 1);
                        
                        modelo.addRow( new Object[] {ultimo,nombreHost,dispositivo,cad_recibe});
                        BD(cad_recibe);

                        datosRs232 = cad_recibe;
                        /*le enviamos datos al cliente*/
//                        salida = new PrintStream(SocketCliente.getOutputStream());
//                        salida.println("hola");
                        cad_recibe = "";
                    }
                } catch (Exception e) {

                }

            }
        }
    }

    public abstract class SocketConexion extends Thread {

        @Override
        public void run() {
            while (true) {

                /* Ponemos un Try-Catch para atrapar las exepcciones del Socket */
                try {
                    /* Establecemos conexcion y esperamos algun cliente */
                    //SocketCliente = new Socket();
                    SocketCliente = SocketServidor.accept();
                    System.out.println("Cliente conectado");

                    /* Recibimos datos del cliente */
                    entrada = new BufferedReader(new InputStreamReader(SocketCliente.getInputStream()));
                    nombreHost = entrada.readLine();
                    dispositivo = entrada.readLine();
                    estado = entrada.readLine();

                    /* Mostramos mensaje del cliente */
                    if (estado.equals("0")) Area_ethernet.setText("Dispositivo: "+dispositivo + "\nStatus: Apagado");
                    if (estado.equals("1")) Area_ethernet.setText("Dispositivo: "+dispositivo + "\nStatus: Encendido");
                    Enviar(estado);

                    
                    
                    if (estado.equals("0")) salida.println("APAGADO");
                    if (estado.equals("1")) salida.println("ENCENDIDO");
                    

                    /* Cerramos el Buffer de datos para esperar otro cliente */
                    entrada.close();
                } catch (Exception e) {
                    System.out.println("Ocurrio un error en el Hilo");
                    System.err.println(e);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Area_ethernet;
    private javax.swing.JTextArea Area_rs232;
    private javax.swing.JButton Boton_configurar;
    private javax.swing.JComboBox Combo_coms;
    private javax.swing.JTable Tabla_Info;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
